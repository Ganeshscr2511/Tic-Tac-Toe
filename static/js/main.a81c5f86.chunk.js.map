{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["TicTacToe","Game","useState","board","setBoard","winner","lines","i","length","a","b","c","decideWinner","isXturn","setIsXturn","className","map","val","index","GameBox","onplayerClick","boardCopy","handleClick","onClick","styles","color","style","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAWA,SAASA,IACP,OACE,cAACC,EAAD,IAIJ,SAASA,IACP,MAAyBC,mBAAS,CAChC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,OATF,mBAAMC,EAAN,KAAaC,EAAb,KAgCMC,EApBc,SAACF,GAWnB,IAVA,IAAMG,EAAM,CACV,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,GACL,CAAC,EAAE,EAAE,IAEEC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAIR,EAAMM,IAAMN,EAAMM,KAAON,EAAMO,IAAMP,EAAMO,KAAOP,EAAMQ,GAC1D,OAAOR,EAAMM,GAGjB,OAAO,KAGMG,CAAaT,GAE5B,EAA8BD,oBAAS,GAAvC,mBAAMW,EAAN,KAAeC,EAAf,KAeA,OACE,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,iBAAf,SACCZ,EAAMa,KAAI,SAACC,EAAKC,GAAN,OACT,cAACC,EAAD,CAASF,IAAKA,EAAKG,cAAe,kBAjBtB,SAACF,GACjB,IAAIf,EAAMe,KAAWb,EAAO,CAC1B,IAAMgB,EAAU,YAAIlB,GACpBkB,EAAUH,GAAOL,EAAS,IAAM,IAChCT,EAASiB,GACTP,GAAYD,IAY6BS,CAAYJ,WAGnD,6BACGb,EAAQ,iBAAmBA,GAAWQ,EAAU,IAAM,KAAO,UAGhE,wBAAQU,QAfC,WACbnB,EAAS,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,QAcpBW,UAAU,WAApC,sBAMR,SAASI,EAAT,GAAuC,IAArBF,EAAoB,EAApBA,IAAKG,EAAe,EAAfA,cACfI,EAAO,CAAEC,MAAa,MAANR,EAAW,QAAU,OAC3C,OACE,qBAAKS,MAAOF,EAAQD,QAASH,EAAeL,UAAU,WAAtD,SAAkEE,IAIvDU,MAxFf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAACf,EAAD,OCMS4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a81c5f86.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TicTacToe />\n    </div>\n  );\n}\n\nfunction TicTacToe(){\n  return(\n    <Game />\n  )\n}\n\nfunction Game(){\n  const[board, setBoard] = useState([\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n    null,\n  ]);\n\n  const decideWinner =(board) => {\n    const lines=[\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (board[a] && board[a] === board[b] && board[b] === board[c]) {\n        return board[a];\n      }\n    }\n    return null;\n  }\n\n  const winner = decideWinner(board);\n\n  const[isXturn, setIsXturn ] = useState(true);\n\n  const handleClick=(index) =>{\n    if(!board[index] && !winner){\n      const boardCopy=[...board]\n      boardCopy[index]=isXturn? \"X\" : \"0\";\n      setBoard(boardCopy);\n      setIsXturn(!isXturn);\n    }\n  }\n\n  const restart =() => {\n    setBoard([null,null,null,null,null,null,null,null,null])\n  }\n\n  return(\n    <div className=\"fullGame\">\n      <div className=\"Game-Container\">\n      {board.map((val, index) => (\n        <GameBox val={val} onplayerClick={()=> handleClick(index) }/>\n      ))}\n    </div>\n        <h1> \n          {winner? \"The winner is \" + winner :  (isXturn ? \"X\" : \"O\") + \" Turn\"}\n\n        </h1>\n        <button onClick={restart} className=\"resetBtn\">Reset</button>      \n    </div>    \n  )\n}\n\n\nfunction GameBox({val, onplayerClick}){\n  const styles={ color: val===\"X\"? \"green\" : \"red\" }\n  return(\n    <div style={styles} onClick={onplayerClick} className=\"Game-box\">{val}</div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}